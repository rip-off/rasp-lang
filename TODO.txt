Links:
* https://github.com/rip-off/rasp-lang/
* https://travis-ci.org/rip-off/rasp-lang

Doing:
* Decide!

Known bugs / issues:
* Short circuiting for &&, ||
* Investigate stuff being left over in the stack
* Clean checkout, need to mkdir /obj

Questions:
* Allow overloading? For example "+" supports strings and numbers

Feels missing:
* "return"

Next:
* Unit testing
** For C++ code
** For rasp
** Reflection - scan scope for test_*
* way to trap errors?
* Allow user to include files / modules?
* Add a type system?
* Demote nil from value to optional type?

Bucket list:
* Floating point numbers
* String manipulation function
* Rasp based implementation of advanced data structures
** Dynamic arrays
** Linked list
** Trees
** Set
** Map
* Linking (requires, provides) ?

Nice to have:
* Column in SourceLocation
* Named parameters
* Array literals
* Dictionary literals
* Nicer repl
** Editing cursor: left & right
** Command history: up & down

Wild ideas:
* Invoke with multiple mains, each its own thread / process

Done:
* Continuous integration build
* "else"
* User defined types
* Arrays
* Assertion mechanism
* Print line numbers associated with execution errors
* Print stack traces for errors in functions?
* SourceLocation in InternalFunction?
* Identifier checks
* Booleans
* Loops
* Cleanup keyword handling
* User defined functions
** Local variables
** Arguments
* Non-stupid build system
* Comments
* Some basic stuff
* Conditions
* Variable declarations


Type analysis / deduction
* Every expression may have a type
* Start with TYPE_UNDETERMINED
* Look for clues
** Numeric, string and boolean literals are typed
** Challenge: nil type
** Built-in function calls are typed
** Challenge: some functions are generic

(var x 10) // x:number
(var y x) // y <- typeof(x)
(var z (+ ...)) // z -> typeof(+)
(defun (f) (var a (f))) // a -> typeof(f)
(var b [1 2 3]) // b -> typeof(???) array[int] desired
(var c nil) // c -> typeof(???)

Goals:
  * Predict errors prior to execution (e.g. (+ "forty-six" 2)
  * Constrain values to expected bounds (e.g. x is always numeric)
  * Enforce at runtime
  * Allow for overloading same function name based on type

Algorithm:
 * Build dependency graph between expressions
 * Propagate known types into graph
 * Find & report inconsistent resolutions

