(println "hello world")
(println "hello, \"Alice\", how are you?")
(println "does" "print" "add" "spaces")
(print "Newline #1\nNewline #2\nNewline #3\n")

(println "try: 1 and 1")
(if 1 (if 1 (println "out: both")) (println "out: first"))

(println "try: 1 and nil")
(if 1 (if nil (println "out: both")) (println "out: first"))

(println "try: nil and nil")
(if nil (if nil (println "out: both")) (println "out: first"))

(println "try: nil and 1")
(if nil (if 1 (println "out: both")) (println "out: first"))

(println "\nAnd now...\nWith variables!\n\n")

// Single line comment
// (println "this is commented and should not be printed")
/* block comments */ (println "This is not commented" /* but this is */ " and should be printed")
/* (println "this should not be printed") */
/*
	Multi-line
	Block comment
*/


/* Interesting */ /**/ /* comment */


(var x nil)
(var y nil)

(println "try: " x " and " y)
(if x (if y (println "out: both")) (println "out: first"))

(set x 1)
(set y nil)

(println "try: " x " and " y)
(if x (if y (println "out: both")) (println "out: first"))

(set x 1)
(set y 1)

(println "try: " x " and " y)
(if x (if y (println "out: both")) (println "out: first"))

(set x nil)
(set y 1)

(println "try: " x " and " y)
(if x (if y (println "out: both")) (println "out: first"))

(var i 0)
(while (< i 5) (println "loop: " (+ i 1)) (set i (+ i 1)))

(while (< i 5) (println "don't loop: " (+ i 1)) (set i (+ i 1)))


(defun testFunction () (println "Inside test function"))
(testFunction)

(defun testReturn () "Return value from 'testReturn'")
(println "The result of (testReturn) -> " (testReturn))

(defun testLoop ()
	(var loopy 0)
	(while (< loopy 5)
		(set loopy (+ loopy 1))
		(println "Test loop in function: " loopy)))
(testLoop)

(defun testLocalFunction ()
	(defun  localFunction () "success")
	(println "Testing local functions: " (localFunction)))
(testLocalFunction)

(defun testParameters (x y) (println "Parameters: X is " x " and Y is " y))
(testParameters 1 2)

(defun testRecursion (x)
	(println "Recursion test: " x)
	(if (> x 0)
		(testRecursion (- x 1))))
(testRecursion 5)

