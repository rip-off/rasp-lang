(type linked_list_node_type element next)
(type linked_list_type length head)

(defun new_linked_list () (new linked_list_type 0 nil))

(defun length_linked_list (list) list.length)

(defun visitListNode (node callback)
	(if node
		(callback node.element)
		(visitListNode node.next callback)))

(defun each_linked_list (list callback) (visitListNode list.head callback))

(defun push_linked_list (list element)
	(var newHead (new linked_list_node_type element list.head))
	(var newLength (+ 1 list.length))
	(new linked_list_type newLength newHead))

// Helper function (TODO: why can't this be nested?)
(defun get_linked_list_node (node index)
	(if (== 0 index) 
		node.element
	else
		(get_linked_list_node node.next (- index 1))))

(defun get_linked_list (list index)
	(assert (< index list.length) "Index too big!")
	(assert (>= index 0) "Index too small!")
	(get_linked_list_node list.head index))

(defun print_linked_list (list)
	(var length (length_linked_list list))
	(println "List has " length " element(s)")
	(var i 0)
	(while (< i length)
		(var element (get_linked_list list i))
		(println " * " element)
		(set i (+ i 1))))

