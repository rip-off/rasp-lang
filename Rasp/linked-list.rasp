(type LinkedListNode element next)
(type LinkedList length head)

(defun newLinkedList () (new LinkedList 0 nil))

(defun lengthLinkedList (list) list.length)

(defun pushLinkedList (list element)
	(var newHead (new LinkedListNode element list.head))
	(var newLength (+ 1 list.length))
	(new LinkedList newLength newHead))

// Helper function (TODO: why can't this be nested?)
(defun getLinkedListNode (node index)
	(if (== 0 index) 
		node.element)
	(if (!= 0 index)
		(getLinkedListNode node.next (- index 1))))

(defun getLinkedList (list index)
	(assert (< index list.length) "Index too big!")
	(assert (>= index 0) "Index too small!")
	(getLinkedListNode list.head index))

(defun printLinkedList (list)
	(var length (lengthLinkedList list))
	(println "List has " length " element(s)")
	(var i 0)
	(while (< i length)
		(var element (getLinkedList list i))
		(println " * " element)
		(set i (+ i 1))))

(var list (newLinkedList))

(while true
	(printLinkedList list)
	(print "Enter value to add: ")
	(var input (read_line))
	(set list (pushLinkedList list input)))

