// Implementation note: lists are length prefixed
(var ARRAY_LIST_LENGTH_INDEX 0)

(defun new_array_list ()
	(var initial_capacity 10)
	(var list (array_new (+ initial_capacity 1)))
    (set list (array_set_element list ARRAY_LIST_LENGTH_INDEX 0))
    list)

(defun array_list_length (list) (array_element list ARRAY_LIST_LENGTH_INDEX))

(defun array_list_capacity (list) (- (array_length list) 1))

(defun array_list_add (list element)
	(var old_length (array_list_length list))
	(var new_length (+ old_length 1))
	(var capacity (array_list_capacity list))
	(var result nil)
(println "old_length " old_length ", capacity " capacity)
	(assert (<= old_length capacity))
	(if (< old_length capacity)
		(set result (array_set_element list new_length element)))
	(if (== old_length capacity)
		(set capacity (* capacity 2))
		(set result (array_new (+ capacity 1)))
		(var i 0)
(println "old_length " old_length ", i " i)
		(while (< i old_length)
			(set result (array_set_element result (+ i 1) (array_element list (+ i 1))))
			(set i (+ i 1))))
	(set result (array_set_element result ARRAY_LIST_LENGTH_INDEX new_length))
	result)

(defun array_list_element (list index) (array_element list (- index 1)))

(var list (new_array_list))
(while true
	(println "List is:")
	(var i 0)
(println "i " i ", " list ", (array_list_length list) " (array_list_length list))
	(while (< i (array_list_length list))
		(println (array_list_element list i))
		(set i (+ i 1)))
	(println "Enter value to add:")
	(var input (read_line))
	(set list (array_list_add list input)))
