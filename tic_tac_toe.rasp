
(defun debug_log (message object)
	(if false
		(println "DEBUG " message ": " object)))

(defun print_state (state)
	(var y 0)
	(while (< y (array_length state))
		(println "+-+-+-+")
		(var row (array_element state y))
		(var x 0)
		(while (< x (array_length row))
			(print "|")
			(print (array_element row x))
			(set x (+ 1 x)))
		(println "|")
		(set y (+ 1 y)))
	(println "+-+-+-+"))

(defun read_int (prompt)
	(var result nil)
	(var show_error false)
	(while (is_nil result)
		(if show_error
			(println "Please enter a number"))
		(print prompt)
		(var input (read_line))
		(set result (try_convert_string_to_int input))
		// No need to check if there was actually an error
		// we'll never print the message in that case...
		(set show_error true))
	result)

(defun read_tic_tac_toe_position (description)
	(var result nil)
	(while (is_nil result)
		(var input (read_int (format "Enter the " description " (1 to 3): ")))
		(var valid true)
		(if (< input 1)
			(println "Input must be at least 1")
			(set valid false))
		(if (> input 3)
			(println "Input must be at most 3")
			(set valid false))
		(if valid
			(set result input)))
	// Translate from human to array co-ordinates
	(- result 1))
	
(var EMPTY_CELL " ")

(defun make_move (player state)
	(println "Player " player "'s turn!")
	(var moved false)
	(while (! moved)
		(var row_input (read_tic_tac_toe_position "row"))
		(var column_input (read_tic_tac_toe_position "column"))
		(println "You entered " (+ row_input 1) ", " (+ column_input 1))
		(var row (array_element state row_input))
		(var element (array_element row column_input))
		(if (== element EMPTY_CELL)
			(set row (array_set_element row column_input player))
			(debug_log "row" row)
			(set state (array_set_element state row_input row))
			(debug_log "state" state)
			(set moved true)
		else
			(println "Sorry, that space is taken!")))
	state)

(defun create_tic_tac_toe_state ()
	(var state (array_new 3))
	(var i 0)
	(while (< i 3)
		(var row (array_new 3))
		(var j 0)
		(while (< j 3)
			(set row (array_set_element row j EMPTY_CELL))
			(set j (+ j 1)))
		(set state (array_set_element state i row))
		(set i (+ i 1)))
	state)

(defun cell (state row_index column_index)
	(var row (array_element state row_index))
	(array_element row column_index))

(defun win_by_row (state)
	(var row_index 0)
	(var result false)
	(while (< row_index 3)
		(var row (array_element state row_index))
		(var first (array_element row 0))
		(if (&& (!= first EMPTY_CELL) (== first (array_element row 1)) (== first (array_element row 2)))
			(set result true))
		(set row_index (+ row_index 1)))
	result)

(defun win_by_column (state)
	(var column_index 0)
	(var result false)
	(while (< column_index 3)
		(var first (cell state 0 column_index))
		(if (&& (!= first EMPTY_CELL) (== first (cell state 1 column_index)) (== first (cell state 2 column_index)))
			(set result true))
		(set column_index (+ column_index 1)))
	result)

(defun win_by_diagonal (state)
	(var result false)
	(var middle (cell state 1 1))
	(if (!= middle EMPTY_CELL)
		// Top left to bottom right
		(if (&& (== middle (cell state 0 0)) (== middle (cell state 2 2)))
				(set result true))
		// Bottom left to top right
		(if (&& (== middle (cell state 2 0)) (== middle (cell state 0 2)))
			(set result true))
		)
	result)

(defun game_over (state)
	(|| (win_by_row state) (win_by_column state) (win_by_diagonal state)))

(var PLAYER_X "X")
(var PLAYER_O "O")

(defun next_player (current_player)
  (if (== current_player PLAYER_X) PLAYER_O else PLAYER_X))
	
(defun main ()
	(var state (create_tic_tac_toe_state))
	(var running true)
	(var player PLAYER_X)
	(while (! (game_over state))
		(print_state state)
		(set state (make_move player state))
		(debug_log "main state" state)
		(set player (next_player player)))
  // TODO: print winner / draw
	(println "Thanks for playing!"))

(main)

