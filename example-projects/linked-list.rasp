//

(type linked_list_node_type element next)
(type linked_list_type length head)

(defun new_linked_list () (new linked_list_type 0 nil))

(defun length_linked_list (list) list.length)

(defun visitListNode (node callback)
	(if node
		(callback node.element)
		(visitListNode node.next callback)))

(defun each_linked_list (list callback) (visitListNode list.head callback))

(defun push_linked_list (list element)
	(var newHead (new linked_list_node_type element list.head))
	(var newLength (+ 1 list.length))
	(new linked_list_type newLength newHead))

// Helper function (TODO: why can't this be nested?)
(defun get_linked_list_node (node index)
	(if (== 0 index) 
		node.element
	else
		(get_linked_list_node node.next (- index 1))))

(defun get_linked_list (list index)
	(assert (< index list.length) "Index too big!")
	(assert (>= index 0) "Index too small!")
	(get_linked_list_node list.head index))

(defun linked_list_remove (list index_to_remove)
  (assert (< index_to_remove list.length) "Index too big!")
  (assert (>= index_to_remove 0) "Index too small!")
  (var copy (new_linked_list))
  (var i 0)
  (while (< i list.length)
    (if (!= i index_to_remove)
      // TODO: avoid visiting the elements in each iteration
      (set copy (push_linked_list copy (get_linked_list list i))))
    (inc i))
  copy)
