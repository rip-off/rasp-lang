// Poker!
(var SUITS (array "♠" "♥" "♦" "♣"))
(var NUM_SUITS (array_length SUITS))
(var CARDS_IN_SUIT 13)
(var HAND_SIZE 5)
(var CARDS_IN_DECK (* NUM_SUITS CARDS_IN_SUIT))

(defun suit (card)
  (var index (/ card CARDS_IN_SUIT))
  (array_element SUITS index))

(defun rank (card)
  (var result "UNKNOWN_CARD_RANK")
  (var value (% card CARDS_IN_SUIT))
  (if (== value 0)
    (set result "A"))
  (if (&& (> value 0) (< value 9))
    (set result (to_str (+ 1 value))))
  (if (== value 9)
    (set result "T"))
  (if (== value 10)
    (set result "J"))
  (if (== value 11)
    (set result "Q"))
  (if (== value 12)
    (set result "K"))
  result)

(defun print_cards (cards)
  (var i 0)
  (while (< i (array_length cards))
    (var card (array_element cards i))
    (print (rank card) (suit card))
    (if (== (- CARDS_IN_SUIT 1) (% i CARDS_IN_SUIT))
      (println)
      else
      (if (!= (+ i 1) (array_length cards)) (print " | ")))
    (inc i))
  (println))

(defun populate_deck ()
  (var deck (array_new CARDS_IN_DECK))
  // Initialise deck
  (var i 0)
  (while (< i CARDS_IN_DECK)
    (set deck (array_set_element deck i i))
    (inc i))
  deck)

// main

(srand)
(var deck (populate_deck))
(println "DECK:")
(print_cards deck)

(set deck (random_shuffle deck))
(println "SHUFFLED:")
(print_cards deck)

(var next_card 0)
(defun deal_hand ()
  (var hand (array_new HAND_SIZE))
  (var i 0)
  (while (< i HAND_SIZE)
    (set hand (array_set_element hand i (array_element deck next_card)))
    (inc next_card)
    (inc i))
  hand)

(var dealer (deal_hand))
(var player (deal_hand))

(print "Player: ")
(print_cards player)
(println)

(print "Dealer: ")
(print_cards dealer)
(println)

